#!/usr/bin/env python3
"""
Int√©gration Google Sheets pour ESPN NBA Fantasy Data
Export automatique des donn√©es vers Google Sheets pour analyses avanc√©es
Syst√®me complet avec feuilles d'analyse et visualisations
"""

import gspread
from google.oauth2.service_account import Credentials
import pandas as pd
from datetime import datetime, timedelta
import json
import logging
from typing import Dict, List, Any
import numpy as np

class GoogleSheetsNBAExporter:
    """Exportateur vers Google Sheets pour les donn√©es NBA Fantasy avec analyses avanc√©es"""
    
    def __init__(self, credentials_file: str = "credentials.json", spreadsheet_id: str = None):
        self.credentials_file = credentials_file
        self.spreadsheet_id = spreadsheet_id
        self.setup_google_sheets()
        self.setup_logging()
    
    def setup_google_sheets(self):
        """Configure la connexion √† Google Sheets"""
        try:
            # D√©finition des scopes
            scopes = [
                'https://www.googleapis.com/auth/spreadsheets',
                'https://www.googleapis.com/auth/drive'
            ]
            
            # Chargement des credentials
            creds = Credentials.from_service_account_file(
                self.credentials_file, 
                scopes=scopes
            )
            
            # Initialisation de gspread
            self.gc = gspread.authorize(creds)
            
            # Cr√©ation ou ouverture du spreadsheet
            if self.spreadsheet_id:
                self.spreadsheet = self.gc.open_by_key(self.spreadsheet_id)
            else:
                # Cr√©er un nouveau spreadsheet
                self.spreadsheet = self.gc.create("ESPN NBA Fantasy Data - Neon Cobras 99")
                self.spreadsheet_id = self.spreadsheet.id
                print(f"üìä Nouveau spreadsheet cr√©√©: {self.spreadsheet.url}")
            
            logging.info("‚úÖ Connexion Google Sheets √©tablie")
            
        except Exception as e:
            logging.error(f"‚ùå Erreur connexion Google Sheets: {e}")
            raise
    
    def setup_logging(self):
        """Configure le logging"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
    
    def create_worksheets(self):
        """Cr√©e les feuilles de calcul n√©cessaires avec structure d'analyse"""
        worksheets = {
            # Feuilles de donn√©es
            'daily_snapshot': 'üìä Donn√©es Quotidiennes',
            'teams_summary': 'üèÄ R√©sum√© √âquipes',
            'players_detailed': 'üë• Joueurs D√©taill√©s',
            'transactions': 'üîÑ Transactions',
            'free_agents': 'üÜì Agents Libres',
            'injuries': 'üè• Blessures',
            
            # Feuilles d'analyse
            'rankings': 'üìà Classements ROTO',
            'bench_analysis': 'ü™ë Analyse Banc',
            'ai_insights': 'ü§ñ Insights IA',
            'trends': 'üìä Tendances',
            'my_team_analysis': 'üëë Mon √âquipe - Analyse',
            'roto_optimization': 'üéØ Optimisation ROTO',
            'trade_analysis': 'üíº Analyse Trades',
            'streaming_targets': 'üéØ Cibles Streaming',
            'injury_management': 'üè• Gestion Blessures',
            'weekly_report': 'üìÖ Rapport Hebdomadaire',
            'dashboard': 'üìä Dashboard Principal'
        }
        
        for sheet_name, title in worksheets.items():
            try:
                # V√©rifie si la feuille existe
                try:
                    self.spreadsheet.worksheet(title)
                    self.logger.info(f"üìä Feuille '{title}' existe d√©j√†")
                except:
                    # Cr√©e la feuille si elle n'existe pas
                    worksheet = self.spreadsheet.add_worksheet(title=title, rows=2000, cols=30)
                    
                    # Configuration sp√©ciale selon le type de feuille
                    if 'analysis' in sheet_name or 'dashboard' in sheet_name:
                        self._setup_analysis_worksheet(worksheet, sheet_name)
                    
                    self.logger.info(f"‚úÖ Feuille '{title}' cr√©√©e")
                    
            except Exception as e:
                self.logger.error(f"‚ùå Erreur cr√©ation feuille '{title}': {e}")
    
    def _setup_analysis_worksheet(self, worksheet, sheet_name):
        """Configure une feuille d'analyse avec formules et formatage"""
        try:
            if sheet_name == 'my_team_analysis':
                self._setup_my_team_analysis(worksheet)
            elif sheet_name == 'roto_optimization':
                self._setup_roto_optimization(worksheet)
            elif sheet_name == 'dashboard':
                self._setup_dashboard(worksheet)
            elif sheet_name == 'bench_analysis':
                self._setup_bench_analysis(worksheet)
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur configuration feuille {sheet_name}: {e}")
    
    def _setup_my_team_analysis(self, worksheet):
        """Configure la feuille d'analyse de mon √©quipe"""
        headers = [
            'Date', 'Statut', 'Joueur', 'Position', 'Points', 'Rebonds', 'Assists',
            'Steals', 'Blocks', 'Efficacit√©', 'Banc/Actif', 'Impact Classement',
            'Recommandation', 'Priorit√©'
        ]
        worksheet.update('A1:N1', [headers])
        
        # Formules d'analyse
        formulas = [
            ['=IF(K2="Banc","‚ö†Ô∏è Points perdus","‚úÖ Optimis√©")', 'L2'],
            ['=IF(J2>30,"üî• Hot","‚ùÑÔ∏è Cold")', 'M2'],
            ['=IF(L2="‚ö†Ô∏è Points perdus","üî¥ Haute","üü¢ Normale")', 'N2']
        ]
        
        for formula, cell in formulas:
            worksheet.update(cell, [[formula]])
    
    def _setup_roto_optimization(self, worksheet):
        """Configure la feuille d'optimisation ROTO"""
        headers = [
            'Cat√©gorie', 'Mon Rang', 'Points', '√âcart Leader', 'Faiblesse',
            'Joueurs Am√©lioration', 'Actions Sugg√©r√©es', 'Priorit√©'
        ]
        worksheet.update('A1:H1', [headers])
        
        # Cat√©gories ROTO
        roto_categories = [
            'Points', 'Rebonds', 'Assists', 'Steals', 'Blocks',
            'FG%', 'FT%', '3PM', 'Turnovers'
        ]
        
        for i, category in enumerate(roto_categories, 2):
            worksheet.update(f'A{i}', [[category]])
    
    def _setup_dashboard(self, worksheet):
        """Configure le dashboard principal"""
        # Titre principal
        worksheet.update('A1', [['üèÄ ESPN NBA FANTASY DASHBOARD - NEON COBRAS 99']])
        worksheet.update('A1:Z1', [['üèÄ ESPN NBA FANTASY DASHBOARD - NEON COBRAS 99']])
        
        # Sections du dashboard
        sections = [
            ['üìä R√âSUM√â QUOTIDIEN', 'A3'],
            ['üèÜ CLASSEMENT ACTUEL', 'A6'],
            ['‚ö†Ô∏è ALERTES IMPORTANTES', 'A9'],
            ['üéØ RECOMMANDATIONS IA', 'A12'],
            ['üìà TENDANCES', 'A15'],
            ['üîÑ ACTIVIT√â R√âCENTE', 'A18']
        ]
        
        for section, cell in sections:
            worksheet.update(cell, [[section]])
    
    def _setup_bench_analysis(self, worksheet):
        """Configure la feuille d'analyse du banc"""
        headers = [
            'Date', '√âquipe', 'Points Banc', 'Points Actifs', 'Diff√©rence',
            'Impact %', 'Recommandation', 'Action Requise', 'Priorit√©'
        ]
        worksheet.update('A1:I1', [headers])
        
        # Formules de calcul
        formulas = [
            ['=E2/C2*100', 'F2'],  # Impact %
            ['=IF(E2>20,"üî¥ URGENT","üü° Mod√©r√©")', 'G2'],  # Recommandation
            ['=IF(E2>20,"Changer lineup","Surveiller")', 'H2'],  # Action
            ['=IF(E2>20,"Haute","Normale")', 'I2']  # Priorit√©
        ]
        
        for formula, cell in formulas:
            worksheet.update(cell, [[formula]])
    
    def export_daily_snapshot(self, snapshot_data: Dict):
        """Exporte les donn√©es quotidiennes vers Google Sheets"""
        try:
            # Feuille: Donn√©es Quotidiennes
            self._export_to_sheet('Donn√©es Quotidiennes', snapshot_data['league_info'])
            
            # Feuille: R√©sum√© √âquipes
            self._export_teams_summary(snapshot_data['teams_summary'])
            
            # Feuille: Joueurs D√©taill√©s
            self._export_players_detailed(snapshot_data['players_detailed'])
            
            # Feuille: Transactions
            self._export_transactions(snapshot_data['transactions'])
            
            # Feuille: Agents Libres
            self._export_free_agents(snapshot_data['free_agents'])
            
            # Feuille: Blessures
            self._export_injuries(snapshot_data['injuries'])
            
            # Feuille: Insights IA
            self._export_ai_insights(snapshot_data['ai_insights'])
            
            self.logger.info("‚úÖ Export quotidien vers Google Sheets termin√©")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur export quotidien: {e}")
    
    def _export_to_sheet(self, sheet_name: str, data: Dict):
        """Exporte des donn√©es vers une feuille sp√©cifique"""
        try:
            worksheet = self.spreadsheet.worksheet(sheet_name)
            
            # Efface le contenu existant
            worksheet.clear()
            
            # Pr√©pare les donn√©es
            if isinstance(data, dict):
                # Convertit le dict en liste de listes
                rows = []
                for key, value in data.items():
                    rows.append([key, str(value)])
                
                # Ajoute les en-t√™tes
                worksheet.update('A1:B1', [['Cl√©', 'Valeur']])
                worksheet.update('A2', rows)
            else:
                worksheet.update('A1', [[str(data)]])
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur export vers '{sheet_name}': {e}")
    
    def _export_teams_summary(self, teams_data: List[Dict]):
        """Exporte le r√©sum√© des √©quipes"""
        try:
            worksheet = self.spreadsheet.worksheet('R√©sum√© √âquipes')
            worksheet.clear()
            
            # En-t√™tes
            headers = [
                'Date', '√âquipe', 'Manager', 'Mon √âquipe', 'Rang', 
                'Points Totaux', 'Points Banc', 'Points Actifs',
                'Rebonds', 'Assists', 'Steals', 'Blocks'
            ]
            
            worksheet.update('A1', [headers])
            
            # Donn√©es
            rows = []
            current_date = datetime.now().strftime('%Y-%m-%d')
            
            for team in teams_data:
                row = [
                    current_date,
                    team['team_name'],
                    team['manager'],
                    'OUI' if team['is_my_team'] else 'NON',
                    team['ranking'],
                    team['total_points'],
                    team['bench_points'],
                    team['active_points'],
                    # Ajouter d'autres stats selon les donn√©es disponibles
                    0, 0, 0, 0  # Placeholders pour les autres stats
                ]
                rows.append(row)
            
            worksheet.update('A2', rows)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur export r√©sum√© √©quipes: {e}")
    
    def _export_players_detailed(self, players_data: List[Dict]):
        """Exporte les d√©tails des joueurs"""
        try:
            worksheet = self.spreadsheet.worksheet('Joueurs D√©taill√©s')
            worksheet.clear()
            
            # En-t√™tes
            headers = [
                'Date', '√âquipe', 'Mon √âquipe', 'Joueur', 'Position',
                'Statut', 'Banc', 'Points', 'Rebonds', 'Assists',
                'Steals', 'Blocks', 'Efficacit√©', 'Blessure'
            ]
            
            worksheet.update('A1', [headers])
            
            # Donn√©es
            rows = []
            for player in players_data:
                row = [
                    player['date'],
                    player['team'],
                    'OUI' if player['is_my_team'] else 'NON',
                    player['player_name'],
                    player['position'],
                    player['status'],
                    'OUI' if player['is_bench'] else 'NON',
                    player['points'],
                    player['rebounds'],
                    player['assists'],
                    player['steals'],
                    player['blocks'],
                    player['efficiency'],
                    player['injury_status']
                ]
                rows.append(row)
            
            worksheet.update('A2', rows)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur export joueurs d√©taill√©s: {e}")
    
    def _export_transactions(self, transactions_data: List[Dict]):
        """Exporte les transactions"""
        try:
            worksheet = self.spreadsheet.worksheet('Transactions')
            worksheet.clear()
            
            if not transactions_data:
                worksheet.update('A1', [['Aucune transaction r√©cente']])
                return
            
            # En-t√™tes
            headers = ['Date', 'Type', 'Description', '√âquipe']
            worksheet.update('A1', [headers])
            
            # Donn√©es
            rows = []
            for trans in transactions_data:
                row = [
                    trans['date'],
                    trans['type'],
                    trans['description'],
                    trans['team']
                ]
                rows.append(row)
            
            worksheet.update('A2', rows)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur export transactions: {e}")
    
    def _export_free_agents(self, free_agents_data: List[Dict]):
        """Exporte les agents libres"""
        try:
            worksheet = self.spreadsheet.worksheet('Agents Libres')
            worksheet.clear()
            
            if not free_agents_data:
                worksheet.update('A1', [['Aucun agent libre disponible']])
                return
            
            # En-t√™tes
            headers = ['Joueur', 'Position', '√âquipe NBA', 'Points', 'Rebonds', 'Assists', 'Disponibilit√©']
            worksheet.update('A1', [headers])
            
            # Donn√©es
            rows = []
            for fa in free_agents_data:
                row = [
                    fa.get('name', ''),
                    fa.get('position', ''),
                    fa.get('team', ''),
                    fa.get('points', 0),
                    fa.get('rebounds', 0),
                    fa.get('assists', 0),
                    fa.get('availability', '')
                ]
                rows.append(row)
            
            worksheet.update('A2', rows)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur export agents libres: {e}")
    
    def _export_injuries(self, injuries_data: List[Dict]):
        """Exporte les informations sur les blessures"""
        try:
            worksheet = self.spreadsheet.worksheet('Blessures')
            worksheet.clear()
            
            if not injuries_data:
                worksheet.update('A1', [['Aucune information de blessure']])
                return
            
            # En-t√™tes
            headers = ['Joueur', '√âquipe', 'Statut', 'Date', 'Description']
            worksheet.update('A1', [headers])
            
            # Donn√©es
            rows = []
            for injury in injuries_data:
                row = [
                    injury.get('player', ''),
                    injury.get('team', ''),
                    injury.get('status', ''),
                    injury.get('date', ''),
                    injury.get('description', '')
                ]
                rows.append(row)
            
            worksheet.update('A2', rows)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur export blessures: {e}")
    
    def _export_ai_insights(self, ai_insights: List[Dict]):
        """Exporte les insights IA"""
        try:
            worksheet = self.spreadsheet.worksheet('Insights IA')
            worksheet.clear()
            
            if not ai_insights:
                worksheet.update('A1', [['Aucun insight IA disponible']])
                return
            
            # En-t√™tes
            headers = ['Date', 'Type', 'Priorit√©', 'Message', 'Action Sugg√©r√©e']
            worksheet.update('A1', [headers])
            
            # Donn√©es
            rows = []
            current_date = datetime.now().strftime('%Y-%m-%d')
            
            for insight in ai_insights:
                row = [
                    current_date,
                    insight.get('type', ''),
                    insight.get('priority', ''),
                    insight.get('message', ''),
                    insight.get('action', '')
                ]
                rows.append(row)
            
            worksheet.update('A2', rows)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur export insights IA: {e}")
    
    def create_bench_analysis_sheet(self, snapshot_data: Dict):
        """Cr√©e une feuille d'analyse sp√©cifique pour les points perdus sur le banc"""
        try:
            worksheet = self.spreadsheet.worksheet('Analyse Banc')
            worksheet.clear()
            
            # En-t√™tes
            headers = [
                'Date', '√âquipe', 'Points Banc', 'Points Actifs', 
                'Diff√©rence', 'Impact Classement', 'Recommandation'
            ]
            
            worksheet.update('A1', [headers])
            
            # Analyse pour chaque √©quipe
            rows = []
            current_date = datetime.now().strftime('%Y-%m-%d')
            
            for team in snapshot_data['teams_summary']:
                bench_points = team.get('bench_points', 0)
                active_points = team.get('active_points', 0)
                difference = bench_points - active_points
                
                # Recommandation bas√©e sur la diff√©rence
                if difference > 20:
                    recommendation = "URGENT: Optimiser le lineup"
                elif difference > 10:
                    recommendation = "Consid√©rer des changements"
                else:
                    recommendation = "Lineup optimal"
                
                row = [
                    current_date,
                    team['team_name'],
                    bench_points,
                    active_points,
                    difference,
                    "Impact √©lev√©" if difference > 15 else "Impact mod√©r√©",
                    recommendation
                ]
                rows.append(row)
            
            worksheet.update('A2', rows)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur cr√©ation analyse banc: {e}")
    
    def setup_automated_export(self):
        """Configure l'export automatique"""
        self.logger.info("üîÑ Configuration de l'export automatique vers Google Sheets")
        
        # Cr√©e les feuilles n√©cessaires
        self.create_worksheets()
        
        self.logger.info("‚úÖ Export automatique configur√©")

def main():
    """Fonction principale pour tester l'int√©gration Google Sheets"""
    print("üöÄ ESPN NBA Google Sheets Integration")
    print("=" * 50)
    
    try:
        # Initialisation
        exporter = GoogleSheetsNBAExporter()
        
        # Configuration
        exporter.setup_automated_export()
        
        print("‚úÖ Int√©gration Google Sheets configur√©e avec succ√®s!")
        print("üìä Feuilles de calcul cr√©√©es:")
        print("   - Donn√©es Quotidiennes")
        print("   - R√©sum√© √âquipes")
        print("   - Joueurs D√©taill√©s")
        print("   - Transactions")
        print("   - Agents Libres")
        print("   - Blessures")
        print("   - Analyse Banc")
        print("   - Insights IA")
        
    except Exception as e:
        print(f"‚ùå Erreur configuration Google Sheets: {e}")
        print("üí° Assurez-vous d'avoir configur√© le fichier credentials.json")

if __name__ == "__main__":
    main()
