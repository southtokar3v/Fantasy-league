#!/usr/bin/env python3
"""
Feuilles d'analyse avanc√©e pour Google Sheets
Syst√®me complet d'analyse avec formules, graphiques et alertes
"""

import gspread
from google.oauth2.service_account import Credentials
import pandas as pd
from datetime import datetime, timedelta
import json
import logging
from typing import Dict, List, Any
import numpy as np

class AdvancedAnalysisSheets:
    """Cr√©ateur de feuilles d'analyse avanc√©e pour Google Sheets"""
    
    def __init__(self, spreadsheet):
        self.spreadsheet = spreadsheet
        self.setup_logging()
    
    def setup_logging(self):
        """Configure le logging"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
    
    def create_my_team_analysis(self):
        """Cr√©e la feuille d'analyse d√©taill√©e de mon √©quipe"""
        try:
            # V√©rifie si la feuille existe
            try:
                worksheet = self.spreadsheet.worksheet('üëë Mon √âquipe - Analyse')
            except:
                worksheet = self.spreadsheet.add_worksheet('üëë Mon √âquipe - Analyse', rows=2000, cols=30)
            
            # Configuration de la feuille
            self._setup_my_team_headers(worksheet)
            self._setup_my_team_formulas(worksheet)
            self._setup_my_team_formatting(worksheet)
            
            self.logger.info("‚úÖ Feuille 'Mon √âquipe - Analyse' configur√©e")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur cr√©ation analyse mon √©quipe: {e}")
    
    def _setup_my_team_headers(self, worksheet):
        """Configure les en-t√™tes de la feuille mon √©quipe"""
        # Titre principal
        worksheet.update('A1', [['üëë ANALYSE D√âTAILL√âE - NEON COBRAS 99']])
        
        # Section 1: R√©sum√© quotidien
        worksheet.update('A3', [['üìä R√âSUM√â QUOTIDIEN']])
        daily_headers = [
            'Date', 'Rang Actuel', 'Points Totaux', 'Points Banc', 'Points Actifs',
            'Diff√©rence Banc', 'Impact %', 'Statut', 'Recommandation'
        ]
        worksheet.update('A4:J4', [daily_headers])
        
        # Section 2: Analyse des joueurs
        worksheet.update('A7', [['üë• ANALYSE DES JOUEURS']])
        player_headers = [
            'Joueur', 'Position', 'Statut', 'Points', 'Rebonds', 'Assists',
            'Steals', 'Blocks', 'Efficacit√©', 'Banc/Actif', 'Tendance',
            'Impact', 'Recommandation', 'Priorit√©'
        ]
        worksheet.update('A8:N8', [player_headers])
        
        # Section 3: Analyse des cat√©gories ROTO
        worksheet.update('A12', [['üìà ANALYSE CAT√âGORIES ROTO']])
        roto_headers = [
            'Cat√©gorie', 'Mon Rang', 'Points', '√âcart Leader', 'Faiblesse',
            'Joueurs Am√©lioration', 'Actions Sugg√©r√©es', 'Priorit√©'
        ]
        worksheet.update('A13:H13', [roto_headers])
        
        # Section 4: Alertes et recommandations
        worksheet.update('A17', [['‚ö†Ô∏è ALERTES ET RECOMMANDATIONS']])
        alert_headers = [
            'Type', 'Priorit√©', 'Message', 'Action Sugg√©r√©e', 'Date', 'Statut'
        ]
        worksheet.update('A18:F18', [alert_headers])
    
    def _setup_my_team_formulas(self, worksheet):
        """Configure les formules de calcul pour mon √©quipe"""
        # Formules pour le r√©sum√© quotidien
        formulas = [
            # Impact du banc
            ['=IF(F5>20,"üî¥ URGENT","üü° Mod√©r√©")', 'I5'],
            ['=IF(F5>20,"Changer lineup","Surveiller")', 'J5'],
            
            # Analyse des joueurs
            ['=IF(K9="Banc","‚ö†Ô∏è Points perdus","‚úÖ Optimis√©")', 'L9'],
            ['=IF(J9>30,"üî• Hot","‚ùÑÔ∏è Cold")', 'M9'],
            ['=IF(L9="‚ö†Ô∏è Points perdus","üî¥ Haute","üü¢ Normale")', 'N9'],
            
            # Analyse ROTO
            ['=IF(C14>6,"üî¥ Faible","üü¢ Bon")', 'E14'],
            ['=IF(C14>6,"Am√©liorer cette cat√©gorie","Maintenir")', 'G14'],
            ['=IF(C14>6,"Haute","Normale")', 'H14']
        ]
        
        for formula, cell in formulas:
            worksheet.update(cell, [[formula]])
    
    def _setup_my_team_formatting(self, worksheet):
        """Configure le formatage de la feuille mon √©quipe"""
        # Formatage des en-t√™tes
        header_format = {
            "backgroundColor": {"red": 0.2, "green": 0.4, "blue": 0.8},
            "textFormat": {"bold": True, "foregroundColor": {"red": 1, "green": 1, "blue": 1}}
        }
        
        # Applique le formatage aux en-t√™tes
        worksheet.format('A1:Z1', header_format)
        worksheet.format('A4:J4', header_format)
        worksheet.format('A8:N8', header_format)
        worksheet.format('A13:H13', header_format)
        worksheet.format('A18:F18', header_format)
    
    def create_roto_optimization(self):
        """Cr√©e la feuille d'optimisation ROTO"""
        try:
            try:
                worksheet = self.spreadsheet.worksheet('üéØ Optimisation ROTO')
            except:
                worksheet = self.spreadsheet.add_worksheet('üéØ Optimisation ROTO', rows=2000, cols=30)
            
            self._setup_roto_headers(worksheet)
            self._setup_roto_formulas(worksheet)
            self._setup_roto_formatting(worksheet)
            
            self.logger.info("‚úÖ Feuille 'Optimisation ROTO' configur√©e")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur cr√©ation optimisation ROTO: {e}")
    
    def _setup_roto_headers(self, worksheet):
        """Configure les en-t√™tes de la feuille ROTO"""
        # Titre principal
        worksheet.update('A1', [['üéØ OPTIMISATION ROTO - STRAT√âGIE COMPL√àTE']])
        
        # Section 1: Classement actuel
        worksheet.update('A3', [['üìä CLASSEMENT ACTUEL']])
        ranking_headers = [
            'Cat√©gorie', 'Mon Rang', 'Points', '√âcart Leader', 'Faiblesse',
            'Joueurs Am√©lioration', 'Actions Sugg√©r√©es', 'Priorit√©'
        ]
        worksheet.update('A4:H4', [ranking_headers])
        
        # Section 2: Analyse des faiblesses
        worksheet.update('A8', [['üîç ANALYSE DES FAIBLESSES']])
        weakness_headers = [
            'Cat√©gorie Faible', 'Rang Actuel', '√âcart √† Am√©liorer', 'Joueurs Cibles',
            'Trades Possibles', 'Streaming Options', 'Timeline', 'Impact Estim√©'
        ]
        worksheet.update('A9:H9', [weakness_headers])
        
        # Section 3: Strat√©gie d'am√©lioration
        worksheet.update('A13', [['üöÄ STRAT√âGIE D\'AM√âLIORATION']])
        strategy_headers = [
            'Action', 'Cat√©gorie', 'Joueur', 'Co√ªt', 'B√©n√©fice', 'Risque',
            'Timeline', 'Statut'
        ]
        worksheet.update('A14:H14', [strategy_headers])
    
    def _setup_roto_formulas(self, worksheet):
        """Configure les formules pour l'optimisation ROTO"""
        formulas = [
            # Analyse des faiblesses
            ['=IF(C5>6,"üî¥ Critique","üü° Mod√©r√©")', 'E5'],
            ['=IF(C5>6,"Am√©liorer urgent","Surveiller")', 'G5'],
            ['=IF(C5>6,"Haute","Normale")', 'H5'],
            
            # Strat√©gie d'am√©lioration
            ['=IF(F15>0.7,"üî• Fort","üü° Mod√©r√©")', 'G15'],
            ['=IF(F15>0.7,"Ex√©cuter","√âvaluer")', 'H15']
        ]
        
        for formula, cell in formulas:
            worksheet.update(cell, [[formula]])
    
    def _setup_roto_formatting(self, worksheet):
        """Configure le formatage de la feuille ROTO"""
        header_format = {
            "backgroundColor": {"red": 0.8, "green": 0.2, "blue": 0.2},
            "textFormat": {"bold": True, "foregroundColor": {"red": 1, "green": 1, "blue": 1}}
        }
        
        worksheet.format('A1:Z1', header_format)
        worksheet.format('A4:H4', header_format)
        worksheet.format('A9:H9', header_format)
        worksheet.format('A14:H14', header_format)
    
    def create_bench_analysis(self):
        """Cr√©e la feuille d'analyse du banc"""
        try:
            try:
                worksheet = self.spreadsheet.worksheet('ü™ë Analyse Banc')
            except:
                worksheet = self.spreadsheet.add_worksheet('ü™ë Analyse Banc', rows=2000, cols=30)
            
            self._setup_bench_headers(worksheet)
            self._setup_bench_formulas(worksheet)
            self._setup_bench_formatting(worksheet)
            
            self.logger.info("‚úÖ Feuille 'Analyse Banc' configur√©e")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur cr√©ation analyse banc: {e}")
    
    def _setup_bench_headers(self, worksheet):
        """Configure les en-t√™tes de la feuille banc"""
        # Titre principal
        worksheet.update('A1', [['ü™ë ANALYSE D√âTAILL√âE DU BANC - POINTS PERDUS']])
        
        # Section 1: R√©sum√© du banc
        worksheet.update('A3', [['üìä R√âSUM√â DU BANC']])
        bench_headers = [
            'Date', 'Points Banc', 'Points Actifs', 'Diff√©rence', 'Impact %',
            'Recommandation', 'Action Requise', 'Priorit√©'
        ]
        worksheet.update('A4:H4', [bench_headers])
        
        # Section 2: Joueurs sur le banc
        worksheet.update('A8', [['üë• JOUEURS SUR LE BANC']])
        player_headers = [
            'Joueur', 'Position', 'Points Banc', 'Points Actifs', 'Diff√©rence',
            'Impact', 'Recommandation', 'Action'
        ]
        worksheet.update('A9:H9', [player_headers])
        
        # Section 3: Optimisation
        worksheet.update('A13', [['üéØ OPTIMISATION DU LINEUP']])
        optimization_headers = [
            'Joueur √† Sortir', 'Joueur √† Mettre', 'Gain Estim√©', 'Risque',
            'Impact Classement', 'Recommandation', 'Priorit√©', 'Statut'
        ]
        worksheet.update('A14:H14', [optimization_headers])
    
    def _setup_bench_formulas(self, worksheet):
        """Configure les formules pour l'analyse du banc"""
        formulas = [
            # Impact du banc
            ['=E5/D5*100', 'F5'],
            ['=IF(E5>20,"üî¥ URGENT","üü° Mod√©r√©")', 'G5'],
            ['=IF(E5>20,"Changer lineup","Surveiller")', 'H5'],
            
            # Analyse des joueurs
            ['=IF(E10>15,"üî¥ Critique","üü° Mod√©r√©")', 'F10'],
            ['=IF(E10>15,"Sortir du banc","Surveiller")', 'G10'],
            
            # Optimisation
            ['=IF(C15>20,"üî• Fort","üü° Mod√©r√©")', 'F15'],
            ['=IF(C15>20,"Ex√©cuter","√âvaluer")', 'G15']
        ]
        
        for formula, cell in formulas:
            worksheet.update(cell, [[formula]])
    
    def _setup_bench_formatting(self, worksheet):
        """Configure le formatage de la feuille banc"""
        header_format = {
            "backgroundColor": {"red": 0.2, "green": 0.6, "blue": 0.2},
            "textFormat": {"bold": True, "foregroundColor": {"red": 1, "green": 1, "blue": 1}}
        }
        
        worksheet.format('A1:Z1', header_format)
        worksheet.format('A4:H4', header_format)
        worksheet.format('A9:H9', header_format)
        worksheet.format('A14:H14', header_format)
    
    def create_dashboard(self):
        """Cr√©e le dashboard principal"""
        try:
            try:
                worksheet = self.spreadsheet.worksheet('üìä Dashboard Principal')
            except:
                worksheet = self.spreadsheet.add_worksheet('üìä Dashboard Principal', rows=2000, cols=30)
            
            self._setup_dashboard_headers(worksheet)
            self._setup_dashboard_formulas(worksheet)
            self._setup_dashboard_formatting(worksheet)
            
            self.logger.info("‚úÖ Dashboard principal configur√©")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur cr√©ation dashboard: {e}")
    
    def _setup_dashboard_headers(self, worksheet):
        """Configure les en-t√™tes du dashboard"""
        # Titre principal
        worksheet.update('A1', [['üèÄ ESPN NBA FANTASY DASHBOARD - NEON COBRAS 99']])
        
        # Section 1: R√©sum√© quotidien
        worksheet.update('A3', [['üìä R√âSUM√â QUOTIDIEN']])
        daily_summary = [
            'Date', 'Rang Actuel', 'Points Totaux', 'Points Banc', 'Points Actifs',
            'Diff√©rence Banc', 'Impact %', 'Statut', 'Recommandation'
        ]
        worksheet.update('A4:J4', [daily_summary])
        
        # Section 2: Classement actuel
        worksheet.update('A7', [['üèÜ CLASSEMENT ACTUEL']])
        ranking_summary = [
            'Rang', '√âquipe', 'Points', 'Rebonds', 'Assists', 'Steals', 'Blocks',
            'FG%', 'FT%', '3PM', 'TO', 'Total'
        ]
        worksheet.update('A8:L8', [ranking_summary])
        
        # Section 3: Alertes importantes
        worksheet.update('A11', [['‚ö†Ô∏è ALERTES IMPORTANTES']])
        alert_headers = [
            'Type', 'Priorit√©', 'Message', 'Action Sugg√©r√©e', 'Date', 'Statut'
        ]
        worksheet.update('A12:F12', [alert_headers])
        
        # Section 4: Recommandations IA
        worksheet.update('A16', [['ü§ñ RECOMMANDATIONS IA']])
        ai_headers = [
            'Recommandation', 'Priorit√©', 'Impact', 'Action', 'Timeline', 'Statut'
        ]
        worksheet.update('A17:F17', [ai_headers])
        
        # Section 5: Tendances
        worksheet.update('A21', [['üìà TENDANCES']])
        trend_headers = [
            'Joueur', 'Tendance', 'P√©riode', 'Impact', 'Recommandation', 'Priorit√©'
        ]
        worksheet.update('A22:F22', [trend_headers])
    
    def _setup_dashboard_formulas(self, worksheet):
        """Configure les formules du dashboard"""
        formulas = [
            # R√©sum√© quotidien
            ['=IF(F5>20,"üî¥ URGENT","üü° Mod√©r√©")', 'I5'],
            ['=IF(F5>20,"Optimiser lineup","Surveiller")', 'J5'],
            
            # Alertes
            ['=IF(B13="Haute","üî¥ Critique","üü° Mod√©r√©")', 'F13'],
            ['=IF(B13="Haute","Action imm√©diate","Surveiller")', 'G13'],
            
            # Recommandations IA
            ['=IF(B18="Haute","üî• Fort","üü° Mod√©r√©")', 'C18'],
            ['=IF(B18="Haute","Ex√©cuter","√âvaluer")', 'D18']
        ]
        
        for formula, cell in formulas:
            worksheet.update(cell, [[formula]])
    
    def _setup_dashboard_formatting(self, worksheet):
        """Configure le formatage du dashboard"""
        # Titre principal
        title_format = {
            "backgroundColor": {"red": 0.1, "green": 0.3, "blue": 0.7},
            "textFormat": {"bold": True, "fontSize": 16, "foregroundColor": {"red": 1, "green": 1, "blue": 1}}
        }
        
        # En-t√™tes de sections
        section_format = {
            "backgroundColor": {"red": 0.8, "green": 0.8, "blue": 0.8},
            "textFormat": {"bold": True, "foregroundColor": {"red": 0, "green": 0, "blue": 0}}
        }
        
        worksheet.format('A1:Z1', title_format)
        worksheet.format('A4:J4', section_format)
        worksheet.format('A8:L8', section_format)
        worksheet.format('A12:F12', section_format)
        worksheet.format('A17:F17', section_format)
        worksheet.format('A22:F22', section_format)
    
    def create_all_analysis_sheets(self):
        """Cr√©e toutes les feuilles d'analyse"""
        self.logger.info("üöÄ Cr√©ation de toutes les feuilles d'analyse...")
        
        try:
            self.create_my_team_analysis()
            self.create_roto_optimization()
            self.create_bench_analysis()
            self.create_dashboard()
            
            self.logger.info("‚úÖ Toutes les feuilles d'analyse cr√©√©es avec succ√®s")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur cr√©ation feuilles d'analyse: {e}")

def main():
    """Fonction principale pour cr√©er les feuilles d'analyse"""
    print("üöÄ Cr√©ation des feuilles d'analyse avanc√©e")
    print("=" * 50)
    
    try:
        # Configuration Google Sheets
        from google_sheets_integration import GoogleSheetsNBAExporter
        
        exporter = GoogleSheetsNBAExporter()
        spreadsheet = exporter.spreadsheet
        
        # Cr√©ation des feuilles d'analyse
        analysis_creator = AdvancedAnalysisSheets(spreadsheet)
        analysis_creator.create_all_analysis_sheets()
        
        print("‚úÖ Feuilles d'analyse cr√©√©es avec succ√®s!")
        print("üìä Feuilles disponibles:")
        print("   - üëë Mon √âquipe - Analyse")
        print("   - üéØ Optimisation ROTO")
        print("   - ü™ë Analyse Banc")
        print("   - üìä Dashboard Principal")
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation feuilles d'analyse: {e}")

if __name__ == "__main__":
    main()
